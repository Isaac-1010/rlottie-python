name: Build and upload to PyPI

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  release:
    types:
      - published

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build sdist
        run: pipx run build --sdist

      - name: Test sdist
        run: |
          python -m pip install dist/rlottie-python-*.tar.gz
          pip install pytest &&
          pytest

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  build_wheels:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            arch: x64
            cibw_archs_windows: AMD64
          - os: windows-2019
            arch: x86
            cibw_archs_windows: x86
          - os: windows-2019
            arch: arm64
            cibw_archs_windows: ARM64
          - os: macos-12
            arch: x64
            cibw_archs_macos: x86_64
          - os: macos-12
            arch: universal2
            cibw_archs_macos: universal2
          - os: macos-14
            arch: arm64
            cibw_archs_macos: arm64
          - os: ubuntu-20.04
            arch: x64
            cibw_archs_linux: x86_64
          - os: ubuntu-20.04
            arch: x86
            cibw_archs_linux: i686
          - os: ubuntu-20.04
            arch: arm64
            cibw_archs_linux: aarch64
          - os: ubuntu-20.04
            arch: ppc64le
            cibw_archs_linux: ppc64le
          - os: ubuntu-20.04
            arch: s390x
            cibw_archs_linux: s390x

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_BUILD_FRONTEND: build
          CIBW_ARCHS_WINDOWS: ${{ matrix.cibw_archs_windows }}
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_archs_macos }}
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_archs_linux }}
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {package}/tests
          # If enable stubgen (pyproject.toml), then requires mypy which depends on typed-ast
          # typed-ast cannot run on pypy <3.8
          # https://mypy.readthedocs.io/en/stable/faq.html
          # CIBW_SKIP: pp37-*

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  upload_pypi_test:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}